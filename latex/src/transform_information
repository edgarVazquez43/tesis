Transformar la configuración

Muchos paquetes ROS requieren que el árbol de transformación de un robot se publique utilizando la biblioteca de software tf. En un nivel abstracto, un árbol de transformación define los desplazamientos en términos de traducción y rotación entre diferentes marcos de coordenadas. Para hacer esto más concreto, considere el ejemplo de un robot simple que tiene una base móvil con un solo láser montado encima. Al referirnos al robot, definamos dos cuadros de coordenadas: uno correspondiente al punto central de la base del robot y otro para el punto central del láser que está montado en la parte superior de la base. También démosles nombres para una referencia fácil. Llamaremos al marco de coordenadas unido a la base móvil "base_link" (para la navegación, es importante que esto se coloque en el centro de rotación del robot) y llamaremos al cuadro de coordenadas adjunto al láser "base_laser". Para las convenciones de nomenclatura de tramas, consulte REP 105

En este punto, supongamos que tenemos algunos datos del láser en forma de distancias desde el punto central del láser. En otras palabras, tenemos algunos datos en el marco de coordenadas "base_laser". Ahora supongamos que queremos tomar esta información y usarla para ayudar a la base móvil a evitar obstáculos en el mundo. Para hacer esto con éxito, necesitamos una forma de transformar el escaneo láser que hemos recibido del marco "base_laser" al marco "base_link". En esencia, necesitamos definir una relación entre los marcos de coordenadas "base_laser" y "base_link".

simple_robot.png

Al definir esta relación, supongamos que sabemos que el láser está montado 10 cm hacia adelante y 20 cm sobre el punto central de la base móvil. Esto nos da una compensación de traducción que relaciona el marco "base_link" con el marco "base_laser". Específicamente, sabemos que para obtener datos del marco "base_link" al marco "base_laser" debemos aplicar una traducción de (x: 0.1m, y: 0.0m, z: 0.2m), y para obtener datos del " base_laser "frame to the" base_link "frame debemos aplicar la traducción opuesta (x: -0.1m, y: 0.0m, z: -0.20m).

Podríamos elegir gestionar esta relación nosotros mismos, es decir, almacenar y aplicar las traducciones adecuadas entre los marcos cuando sea necesario, pero esto se convierte en un verdadero dolor a medida que aumenta el número de marcos de coordenadas. Afortunadamente, sin embargo, no tenemos que hacer este trabajo nosotros mismos. En su lugar, definiremos la relación entre "base_link" y "base_laser" una vez que usemos tf y dejaremos que administre la transformación entre los dos cuadros de coordenadas para nosotros.

Para definir y almacenar la relación entre los marcos "base_link" y "base_laser" usando tf, necesitamos agregarlos a un árbol de transformación. Conceptualmente, cada nodo en el árbol de transformación corresponde a un marco de coordenadas y cada borde corresponde a la transformación que debe aplicarse para pasar del nodo actual a su hijo. Tf usa una estructura en árbol para garantizar que solo haya un recorrido único que vincule dos cuadros coordinados entre sí y asume que todos los bordes del árbol se dirigen desde los nodos primarios a secundarios.

Para crear un árbol de transformación para nuestro ejemplo simple, crearemos dos nodos, uno para el marco de coordenadas "base_link" y otro para el marco de coordenadas "base_laser". Para crear una ventaja entre ellos, primero debemos decidir qué nodo será el padre y cuál será el hijo. Recuerde, esta distinción es importante porque asume que todas las transformaciones se mueven de padres a hijos. Elegimos el marco de coordenadas "base_link" como principal, ya que a medida que se agregan otras piezas / sensores al robot, tendrá más sentido que se relacionen con el marco "base_laser" atravesando el marco "base_link". Esto significa que la transformada asociada con el borde que conecta "base_link" y "base_laser" debe ser (x: 0.1m, y: 0.0m, z: 0.2m). Con este árbol de transformación configurado, la conversión del escaneo láser recibido en el marco "base_laser" al marco "base_link" es tan simple como hacer una llamada a la biblioteca tf. Nuestro robot puede usar esta información para razonar acerca de los escaneos láser en el marco "base_link" y planear con seguridad los obstáculos en su entorno.




###############################
URDF

Este paquete contiene un analizador de C ++ para el formato de descripción de robot unificado (URDF), que es un formato XML para representar un modelo de robot. La API de código del analizador ha pasado por nuestro proceso de revisión y seguirá siendo compatible con versiones anteriores en versiones futuras.

Estado del mantenedor: fin de la vida útil (el metapaquete robot_model está en desuso y se eliminará en ROS M. Los paquetes que incluye continuarán siendo mantenidos, pero se moverán a nuevos repositorios).
Mantenedor: Chris Lalancette <clalancette AT osrfoundation DOT org>, Shane Loretz <sloretz AT osrfoundation DOT org>
Autor: Ioan Sucan <isucan AT gmail DOT com>, Jackie Kay <jacquelinekay1 AT gmail DOT com>
Licencia: BSD


Overview

This package contains a number of XML specifications for robot models, sensors, scenes, etc. Each XML specification has a corresponding parser in one or more languages. 

XML Specifications

    sensor/proposals

    Describes a sensor, such as a camera, ray sensor, etc
    link

    Describes the kinematic and dynamic properties of a link.
    transmission

    Transmissions link actuators to joints and represents their mechanical coupling
    joint

    Describes the kinematic and dynamic properties of a joint.
    gazebo

    Describes simulation properties, such as damping, friction, etc
    sensor

    Describes a sensor, such as a camera, ray sensor, etc
    model_state

    Describes the state of a model at a certain time
    model

    Describes the kinematic and dynamic properties of a robot structure. 



######################
LIKS DESCRIPTIONS

Toggle line numbers

   1  <link name="my_link">
   2    <inertial>
   3      <origin xyz="0 0 0.5" rpy="0 0 0"/>
   4      <mass value="1"/>
   5      <inertia ixx="100"  ixy="0"  ixz="0" iyy="100" iyz="0" izz="100" />
   6    </inertial>
   7 
   8    <visual>
   9      <origin xyz="0 0 0" rpy="0 0 0" />
  10      <geometry>
  11        <box size="1 1 1" />
  12      </geometry>
  13      <material name="Cyan">
  14        <color rgba="0 1.0 1.0 1.0"/>
  15      </material>
  16    </visual>
  17 
  18    <collision>
  19      <origin xyz="0 0 0" rpy="0 0 0"/>
  20      <geometry>
  21        <cylinder radius="1" length="0.5"/>
  22      </geometry>
  23    </collision>
  24  </link>


Attributes

    name (required)
        The name of the link itself 

Elements

    <inertial> (optional)
        The inertial properties of the link.

        <origin> (optional: defaults to identity if not specified)

            This is the pose of the inertial reference frame, relative to the link reference frame. The origin of the inertial reference frame needs to be at the center of gravity. The axes of the inertial reference frame do not need to be aligned with the principal axes of the inertia.

            xyz (optional: defaults to zero vector)

                Represents the $$x,y,z$$ offset. 

            rpy (optional: defaults to identity if not specified)
                Represents the fixed axis roll, pitch and yaw angles in radians. 

        <mass>
            The mass of the link is represented by the value attribute of this element 

        <inertia>
            The 3x3 rotational inertia matrix, represented in the inertia frame. Because the rotational inertia matrix is symmetric, only 6 above-diagonal elements of this matrix are specified here, using the attributes ixx, ixy, ixz, iyy, iyz, izz. 

    <visual> (optional)

        The visual properties of the link. This element specifies the shape of the object (box, cylinder, etc.) for visualization purposes. Note: multiple instances of <visual> tags can exist for the same link. The union of the geometry they define forms the visual representation of the link.

        name (optional)
            Specifies a name for a part of a link's geometry. This is useful to be able to refer to specific bits of the geometry of a link. 

        <origin> (optional: defaults to identity if not specified)
            The reference frame of the visual element with respect to the reference frame of the link.

            xyz (optional: defaults to zero vector)

                Represents the $$x,y,z$$ offset. 

            rpy (optional: defaults to identity if not specified)
                Represents the fixed axis roll, pitch and yaw angles in radians. 

        <geometry> (required)

            The shape of the visual object. This can be one of the following:

            <box>

                size attribute contains the three side lengths of the box. The origin of the box is in its center. 

            <cylinder>

                Specify the radius and length. The origin of the cylinder is in its center. cylinder_coordinates.png 

            <sphere>

                Specify the radius. The origin of the sphere is in its center. 

            <mesh>

                A trimesh element specified by a filename, and an optional scale that scales the mesh's axis-aligned-bounding-box. The recommended format for best texture and color support is Collada .dae files, though .stl files are also supported. The mesh file is not transferred between machines referencing the same model. It must be a local file. 

        <material> (optional)
            The material of the visual element. It is allowed to specify a material element outside of the 'link' object, in the top level 'robot' element. From within a link element you can then reference the material by name.

            name name of the material

            <color> (optional)

                rgba The color of a material specified by set of four numbers representing red/green/blue/alpha, each in the range of [0,1]. 

            <texture> (optional)

                The texture of a material is specified by a filename 

    <collision> (optional)

        The collision properties of a link. Note that this can be different from the visual properties of a link, for example, simpler collision models are often used to reduce computation time. Note: multiple instances of <collision> tags can exist for the same link. The union of the geometry they define forms the collision representation of the link.

        name (optional)
            Specifies a name for a part of a link's geometry. This is useful to be able to refer to specific bits of the geometry of a link. 

        <origin> (optional: defaults to identity if not specified)
            The reference frame of the collision element, relative to the reference frame of the link.

            xyz (optional: defaults to zero vector)

                Represents the $$x,y,z$$ offset. 

            rpy (optional: defaults to identity if not specified)
                Represents the fixed axis roll, pitch and yaw angles in radians. 

        <geometry>
            See the geometry description in the above visual element. 





#######################
JOINTS

<Joint> element

The joint element describes the kinematics and dynamics of the joint and also specifies the safety limits of the joint.

Here is an example of a joint element:

Toggle line numbers

   1  <joint name="my_joint" type="floating">
   2     <origin xyz="0 0 1" rpy="0 0 3.1416"/>
   3     <parent link="link1"/>
   4     <child link="link2"/>
   5 
   6     <calibration rising="0.0"/>
   7     <dynamics damping="0.0" friction="0.0"/>
   8     <limit effort="30" velocity="1.0" lower="-2.2" upper="0.7" />
   9     <safety_controller k_velocity="10" k_position="15" soft_lower_limit="-2.0" soft_upper_limit="0.5" />
  10  </joint>


Attributes

The joint element has two attributes:

    name (required)
        Specifies a unique name of the joint 

    type (required)
        Specifies the type of joint, where type can be one of the following:
            revolute - a hinge joint that rotates along the axis and has a limited range specified by the upper and lower limits.
            continuous - a continuous hinge joint that rotates around the axis and has no upper and lower limits
            prismatic - a sliding joint that slides along the axis, and has a limited range specified by the upper and lower limits.
            fixed - This is not really a joint because it cannot move. All degrees of freedom are locked. This type of joint does not require the axis, calibration, dynamics, limits or safety_controller.
            floating - This joint allows motion for all 6 degrees of freedom.
            planar - This joint allows motion in a plane perpendicular to the axis. 

Elements

The joint element has following elements:

    <origin> (optional: defaults to identity if not specified)
        This is the transform from the parent link to the child link. The joint is located at the origin of the child link, as shown in the figure above.

        xyz (optional: defaults to zero vector)

            Represents the $$x,y,z$$ offset. 

        rpy (optional: defaults 'to zero vector 'if not specified)
            Represents the rotation around fixed axis: first roll around x, then pitch around y and finally yaw around z. All angles are specified in radians. 

    <parent> (required)
        Parent link name with mandatory attribute:

        link
            The name of the link that is the parent of this link in the robot tree structure. 

    <child> (required)
        Child link name with mandatory attribute:

        link
            The name of the link that is the child link. 

    <axis> (optional: defaults to (1,0,0))
        The joint axis specified in the joint frame. This is the axis of rotation for revolute joints, the axis of translation for prismatic joints, and the surface normal for planar joints. The axis is specified in the joint frame of reference. Fixed and floating joints do not use the axis field.

        xyz (required)

            Represents the $$x,y,z$$ components of a vector. The vector should be normalized. 

    <calibration> (optional)
        The reference positions of the joint, used to calibrate the absolute position of the joint.

        rising (optional)
            When the joint moves in a positive direction, this reference position will trigger a rising edge. 

        falling (optional)
            When the joint moves in a positive direction, this reference position will trigger a falling edge. 

    <dynamics> (optional)
        An element specifying physical properties of the joint. These values are used to specify modeling properties of the joint, particularly useful for simulation.

        damping (optional, defaults to 0)

            The physical damping value of the joint ($$\frac{N \cdot s}{m}$$ for prismatic joints, $$\frac{N \cdot m \cdot s}{rad}$$ for revolute joints). 

        friction (optional, defaults to 0)

            The physical static friction value of the joint ($$N$$ for prismatic joints, $$N \cdot m$$ for revolute joints). 

    <limit> (required only for revolute and prismatic joint)
        An element can contain the following attributes:

        lower (optional, defaults to 0)
            An attribute specifying the lower joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous. 

        upper (optional, defaults to 0)
            An attribute specifying the upper joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous. 

        effort (required)

            An attribute for enforcing the maximum joint effort ($$|$$applied effort$$| < |$$effort$$|$$). See safety limits. 

        velocity (required)

            An attribute for enforcing the maximum joint velocity. See safety limits. 

    <mimic> (optional) (New with ROS Groovy. See issue)

        This tag is used to specify that the defined joint mimics another existing joint. The value of this joint can be computed as value = multiplier * other_joint_value + offset. Expected and optional attributes:

        joint (required)
            This specifies the name of the joint to mimic. 

        multiplier (optional)
            Specifies the multiplicative factor in the formula above. Defaults to 1. 

        offset (optional)
            Specifies the offset to add in the formula above. Defaults to 0. 

    <safety_controller> (optional)
        An element can contain the following attributes:

        soft_lower_limit (optional, defaults to 0)

            An attribute specifying the lower joint boundary where the safety controller starts limiting the position of the joint. This limit needs to be larger than the lower joint limit (see above). See See safety limits for more details. 

        soft_upper_limit (optional, defaults to 0)

            An attribute specifying the upper joint boundary where the safety controller starts limiting the position of the joint. This limit needs to be smaller than the upper joint limit (see above). See See safety limits for more details. 

        k_position (optional, defaults to 0)

            An attribute specifying the relation between position and velocity limits. See See safety limits for more details. 

        k_velocity (required)

            An attribute specifying the relation between effort and velocity limits. See See safety limits for more details. 



####################
ROBOT MODEL

XML Robot Description Format (URDF)

Contents

    XML Robot Description Format (URDF)
        <link> element
        <joint> element

The Unified Robot Description Format (URDF) is an XML specification to describe a robot. We attempt to keep this specification as general as possible, but obviously the specification cannot describe all robots. The main limitation at this point is that only tree structures can be represented, ruling out all parallel robots. Also, the specification assumes the robot consists of rigid links connected by joints; flexible elements are not supported. The specification covers:

    Kinematic and dynamic description of the robot
    Visual representation of the robot
    Collision model of the robot 

link.png

The description of a robot consists of a set of link elements, and a set of joint elements connecting the links together. So a typical robot description looks something like this:

Toggle line numbers

   1 <robot name="pr2">
   2   <link> ... </link>
   3   <link> ... </link>
   4   <link> ... </link>
   5 
   6   <joint>  ....  </joint>
   7   <joint>  ....  </joint>
   8   <joint>  ....  </joint>
   9 </robot>

You can see that the root element of the URDF format is a <robot> element.

<link> element

For details on the link description format, check out the link elements page.

<joint> element

For details on the joint description format, check out the joint elements page. 

